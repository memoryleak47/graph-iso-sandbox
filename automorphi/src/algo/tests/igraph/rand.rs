use crate::Graph;

#[test]
fn igraph_rand_1_is_asymmetric() {
	let mut g = Graph::empty(9);

	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 8, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(2, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(7, 8, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_3_is_asymmetric() {
	let mut g = Graph::empty(12);

	g.set_edge(0, 2, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 10, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 11, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 11, true);
	g.set_edge(10, 11, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_4_is_asymmetric() {
	let mut g = Graph::empty(12);

	g.set_edge(0, 1, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 10, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 11, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 7, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 11, true);
	g.set_edge(5, 10, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 11, true);
	g.set_edge(8, 11, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_5_is_asymmetric() {
	let mut g = Graph::empty(24);

	g.set_edge(0, 4, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 18, true);
	g.set_edge(0, 19, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 20, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 17, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 18, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 19, true);
	g.set_edge(4, 20, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 22, true);
	g.set_edge(5, 23, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 19, true);
	g.set_edge(6, 20, true);
	g.set_edge(6, 23, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 20, true);
	g.set_edge(7, 23, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 22, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 21, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 22, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 19, true);
	g.set_edge(11, 23, true);
	g.set_edge(12, 17, true);
	g.set_edge(13, 17, true);
	g.set_edge(13, 20, true);
	g.set_edge(14, 19, true);
	g.set_edge(15, 22, true);
	g.set_edge(16, 20, true);
	g.set_edge(17, 19, true);
	g.set_edge(17, 21, true);
	g.set_edge(18, 19, true);
	g.set_edge(18, 23, true);
	g.set_edge(21, 22, true);
	g.set_edge(22, 23, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_6_is_asymmetric() {
	let mut g = Graph::empty(23);

	g.set_edge(0, 1, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 17, true);
	g.set_edge(0, 18, true);
	g.set_edge(0, 19, true);
	g.set_edge(0, 20, true);
	g.set_edge(0, 21, true);
	g.set_edge(0, 22, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 18, true);
	g.set_edge(1, 20, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 16, true);
	g.set_edge(2, 18, true);
	g.set_edge(2, 19, true);
	g.set_edge(2, 20, true);
	g.set_edge(2, 21, true);
	g.set_edge(2, 22, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 18, true);
	g.set_edge(3, 20, true);
	g.set_edge(3, 21, true);
	g.set_edge(3, 22, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 17, true);
	g.set_edge(4, 19, true);
	g.set_edge(4, 21, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 17, true);
	g.set_edge(5, 19, true);
	g.set_edge(5, 21, true);
	g.set_edge(5, 22, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 20, true);
	g.set_edge(6, 21, true);
	g.set_edge(6, 22, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 18, true);
	g.set_edge(7, 19, true);
	g.set_edge(7, 20, true);
	g.set_edge(7, 21, true);
	g.set_edge(7, 22, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 19, true);
	g.set_edge(8, 20, true);
	g.set_edge(8, 22, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 19, true);
	g.set_edge(9, 20, true);
	g.set_edge(9, 22, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 17, true);
	g.set_edge(10, 20, true);
	g.set_edge(10, 22, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 18, true);
	g.set_edge(11, 19, true);
	g.set_edge(11, 21, true);
	g.set_edge(11, 22, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 19, true);
	g.set_edge(12, 22, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 18, true);
	g.set_edge(13, 19, true);
	g.set_edge(13, 21, true);
	g.set_edge(13, 22, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 19, true);
	g.set_edge(14, 20, true);
	g.set_edge(14, 21, true);
	g.set_edge(14, 22, true);
	g.set_edge(15, 16, true);
	g.set_edge(15, 19, true);
	g.set_edge(15, 21, true);
	g.set_edge(15, 22, true);
	g.set_edge(16, 17, true);
	g.set_edge(16, 18, true);
	g.set_edge(16, 20, true);
	g.set_edge(16, 21, true);
	g.set_edge(16, 22, true);
	g.set_edge(17, 18, true);
	g.set_edge(17, 20, true);
	g.set_edge(17, 21, true);
	g.set_edge(17, 22, true);
	g.set_edge(18, 20, true);
	g.set_edge(18, 21, true);
	g.set_edge(18, 22, true);
	g.set_edge(19, 20, true);
	g.set_edge(19, 21, true);
	g.set_edge(20, 21, true);
	g.set_edge(20, 22, true);
	g.set_edge(21, 22, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_7_is_asymmetric() {
	let mut g = Graph::empty(15);

	g.set_edge(0, 1, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 13, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 9, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 13, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 10, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 8, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 14, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 14, true);
	g.set_edge(10, 13, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_8_is_asymmetric() {
	let mut g = Graph::empty(12);

	g.set_edge(0, 3, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 10, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 11, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 9, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(5, 8, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 11, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_9_is_asymmetric() {
	let mut g = Graph::empty(19);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 18, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 18, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 18, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 18, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 17, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 18, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 17, true);
	g.set_edge(6, 18, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 14, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 18, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 17, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 17, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 18, true);
	g.set_edge(12, 17, true);
	g.set_edge(13, 17, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 17, true);
	g.set_edge(15, 17, true);
	g.set_edge(16, 18, true);
	g.set_edge(17, 18, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_11_is_asymmetric() {
	let mut g = Graph::empty(19);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 18, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 18, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 18, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 18, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 18, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 16, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 17, true);
	g.set_edge(6, 18, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 18, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 16, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 18, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 18, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 18, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 18, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 17, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 18, true);
	g.set_edge(15, 16, true);
	g.set_edge(16, 18, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_12_is_asymmetric() {
	let mut g = Graph::empty(20);

	g.set_edge(0, 2, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 17, true);
	g.set_edge(0, 19, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 19, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 16, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 19, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 17, true);
	g.set_edge(4, 19, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 17, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 18, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 17, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 17, true);
	g.set_edge(8, 18, true);
	g.set_edge(9, 10, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 17, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 17, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 15, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 18, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(15, 16, true);
	g.set_edge(15, 19, true);
	g.set_edge(16, 18, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_13_is_asymmetric() {
	let mut g = Graph::empty(13);

	g.set_edge(0, 6, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 11, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 11, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 10, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 11, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 12, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_14_is_asymmetric() {
	let mut g = Graph::empty(8);

	g.set_edge(0, 1, true);
	g.set_edge(0, 5, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(4, 7, true);
	g.set_edge(5, 7, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_16_is_asymmetric() {
	let mut g = Graph::empty(16);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 15, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 14, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 15, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 15, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 15, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 11, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 15, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 14, true);
	g.set_edge(8, 14, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 15, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 15, true);
	g.set_edge(11, 15, true);
	g.set_edge(12, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(14, 15, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_17_is_asymmetric() {
	let mut g = Graph::empty(21);

	g.set_edge(0, 1, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 19, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 17, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 16, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 20, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 16, true);
	g.set_edge(3, 17, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 17, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 18, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 17, true);
	g.set_edge(6, 19, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 17, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 17, true);
	g.set_edge(8, 18, true);
	g.set_edge(8, 20, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 15, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 19, true);
	g.set_edge(10, 20, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 18, true);
	g.set_edge(11, 20, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 20, true);
	g.set_edge(13, 16, true);
	g.set_edge(13, 17, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 18, true);
	g.set_edge(14, 20, true);
	g.set_edge(15, 19, true);
	g.set_edge(17, 18, true);
	g.set_edge(17, 19, true);
	g.set_edge(17, 20, true);
	g.set_edge(18, 19, true);
	g.set_edge(18, 20, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_20_is_asymmetric() {
	let mut g = Graph::empty(9);

	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 8, true);
	g.set_edge(2, 5, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 8, true);
	g.set_edge(4, 8, true);
	g.set_edge(5, 8, true);
	g.set_edge(6, 8, true);
	g.set_edge(7, 8, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_21_is_asymmetric() {
	let mut g = Graph::empty(10);

	g.set_edge(0, 2, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 9, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 9, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(5, 6, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(7, 8, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_22_is_asymmetric() {
	let mut g = Graph::empty(9);

	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 5, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 8, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 6, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 8, true);
	g.set_edge(5, 8, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_24_is_asymmetric() {
	let mut g = Graph::empty(17);

	g.set_edge(0, 2, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 16, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 16, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 16, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 16, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 15, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 16, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 16, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 16, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 16, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 16, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 14, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 15, true);
	g.set_edge(13, 15, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(15, 16, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_25_is_asymmetric() {
	let mut g = Graph::empty(17);

	g.set_edge(0, 2, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 14, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 15, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 16, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 16, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 16, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 15, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 13, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 16, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 16, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 15, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 16, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 16, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(15, 16, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_26_is_asymmetric() {
	let mut g = Graph::empty(11);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 10, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 10, true);
	g.set_edge(4, 10, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 10, true);
	g.set_edge(7, 9, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(9, 10, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_27_is_asymmetric() {
	let mut g = Graph::empty(25);

	g.set_edge(0, 3, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 17, true);
	g.set_edge(0, 18, true);
	g.set_edge(0, 19, true);
	g.set_edge(0, 20, true);
	g.set_edge(0, 21, true);
	g.set_edge(0, 22, true);
	g.set_edge(0, 24, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 18, true);
	g.set_edge(1, 20, true);
	g.set_edge(1, 23, true);
	g.set_edge(1, 24, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 16, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 19, true);
	g.set_edge(2, 20, true);
	g.set_edge(2, 22, true);
	g.set_edge(2, 23, true);
	g.set_edge(2, 24, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 16, true);
	g.set_edge(3, 18, true);
	g.set_edge(3, 19, true);
	g.set_edge(3, 21, true);
	g.set_edge(3, 23, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 17, true);
	g.set_edge(4, 19, true);
	g.set_edge(4, 20, true);
	g.set_edge(4, 21, true);
	g.set_edge(4, 22, true);
	g.set_edge(4, 23, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 20, true);
	g.set_edge(5, 23, true);
	g.set_edge(5, 24, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 21, true);
	g.set_edge(6, 23, true);
	g.set_edge(6, 24, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 17, true);
	g.set_edge(7, 19, true);
	g.set_edge(7, 22, true);
	g.set_edge(7, 23, true);
	g.set_edge(7, 24, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 17, true);
	g.set_edge(8, 22, true);
	g.set_edge(8, 23, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 20, true);
	g.set_edge(9, 22, true);
	g.set_edge(9, 24, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 17, true);
	g.set_edge(10, 18, true);
	g.set_edge(10, 19, true);
	g.set_edge(10, 20, true);
	g.set_edge(10, 21, true);
	g.set_edge(10, 22, true);
	g.set_edge(10, 23, true);
	g.set_edge(10, 24, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 22, true);
	g.set_edge(11, 23, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 20, true);
	g.set_edge(12, 22, true);
	g.set_edge(13, 17, true);
	g.set_edge(13, 18, true);
	g.set_edge(13, 19, true);
	g.set_edge(13, 20, true);
	g.set_edge(13, 23, true);
	g.set_edge(13, 24, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 18, true);
	g.set_edge(14, 19, true);
	g.set_edge(14, 21, true);
	g.set_edge(14, 23, true);
	g.set_edge(14, 24, true);
	g.set_edge(15, 19, true);
	g.set_edge(15, 20, true);
	g.set_edge(15, 21, true);
	g.set_edge(15, 22, true);
	g.set_edge(15, 23, true);
	g.set_edge(15, 24, true);
	g.set_edge(16, 17, true);
	g.set_edge(16, 19, true);
	g.set_edge(16, 23, true);
	g.set_edge(17, 19, true);
	g.set_edge(17, 21, true);
	g.set_edge(17, 22, true);
	g.set_edge(17, 23, true);
	g.set_edge(17, 24, true);
	g.set_edge(18, 20, true);
	g.set_edge(18, 21, true);
	g.set_edge(18, 22, true);
	g.set_edge(18, 24, true);
	g.set_edge(19, 20, true);
	g.set_edge(19, 21, true);
	g.set_edge(19, 22, true);
	g.set_edge(19, 23, true);
	g.set_edge(20, 22, true);
	g.set_edge(21, 23, true);
	g.set_edge(21, 24, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_28_is_asymmetric() {
	let mut g = Graph::empty(8);

	g.set_edge(0, 3, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 6, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(5, 7, true);
	g.set_edge(6, 7, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_29_is_asymmetric() {
	let mut g = Graph::empty(22);

	g.set_edge(0, 8, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 13, true);
	g.set_edge(1, 3, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 16, true);
	g.set_edge(2, 17, true);
	g.set_edge(3, 11, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 13, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 12, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 21, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 13, true);
	g.set_edge(8, 16, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 18, true);
	g.set_edge(9, 19, true);
	g.set_edge(10, 19, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 19, true);
	g.set_edge(12, 19, true);
	g.set_edge(13, 17, true);
	g.set_edge(13, 20, true);
	g.set_edge(13, 21, true);
	g.set_edge(14, 20, true);
	g.set_edge(15, 16, true);
	g.set_edge(15, 20, true);
	g.set_edge(17, 21, true);
	g.set_edge(18, 21, true);
	g.set_edge(19, 21, true);
	g.set_edge(20, 21, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_30_is_asymmetric() {
	let mut g = Graph::empty(22);

	g.set_edge(0, 2, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 18, true);
	g.set_edge(0, 19, true);
	g.set_edge(0, 20, true);
	g.set_edge(0, 21, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 17, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 16, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 20, true);
	g.set_edge(2, 21, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 17, true);
	g.set_edge(3, 19, true);
	g.set_edge(3, 20, true);
	g.set_edge(3, 21, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 18, true);
	g.set_edge(4, 19, true);
	g.set_edge(4, 21, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 18, true);
	g.set_edge(5, 19, true);
	g.set_edge(5, 20, true);
	g.set_edge(5, 21, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 19, true);
	g.set_edge(6, 20, true);
	g.set_edge(6, 21, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 18, true);
	g.set_edge(7, 19, true);
	g.set_edge(7, 20, true);
	g.set_edge(7, 21, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 18, true);
	g.set_edge(8, 20, true);
	g.set_edge(8, 21, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 18, true);
	g.set_edge(9, 19, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 19, true);
	g.set_edge(10, 20, true);
	g.set_edge(10, 21, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 18, true);
	g.set_edge(11, 19, true);
	g.set_edge(11, 20, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 17, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 20, true);
	g.set_edge(12, 21, true);
	g.set_edge(13, 18, true);
	g.set_edge(13, 19, true);
	g.set_edge(13, 20, true);
	g.set_edge(13, 21, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 20, true);
	g.set_edge(14, 21, true);
	g.set_edge(15, 18, true);
	g.set_edge(15, 19, true);
	g.set_edge(15, 20, true);
	g.set_edge(16, 17, true);
	g.set_edge(16, 18, true);
	g.set_edge(16, 20, true);
	g.set_edge(17, 18, true);
	g.set_edge(17, 19, true);
	g.set_edge(17, 20, true);
	g.set_edge(17, 21, true);
	g.set_edge(18, 21, true);
	g.set_edge(20, 21, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_33_is_asymmetric() {
	let mut g = Graph::empty(23);

	g.set_edge(0, 7, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 15, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 15, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 20, true);
	g.set_edge(2, 22, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 17, true);
	g.set_edge(3, 21, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 22, true);
	g.set_edge(6, 21, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 20, true);
	g.set_edge(7, 21, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 15, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 19, true);
	g.set_edge(9, 21, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 17, true);
	g.set_edge(10, 20, true);
	g.set_edge(10, 22, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 15, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 20, true);
	g.set_edge(13, 16, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 19, true);
	g.set_edge(15, 19, true);
	g.set_edge(16, 21, true);
	g.set_edge(17, 18, true);
	g.set_edge(17, 20, true);
	g.set_edge(19, 20, true);
	g.set_edge(19, 21, true);
	g.set_edge(20, 21, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_34_is_asymmetric() {
	let mut g = Graph::empty(21);

	g.set_edge(0, 1, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 18, true);
	g.set_edge(0, 19, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 19, true);
	g.set_edge(1, 20, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 16, true);
	g.set_edge(2, 17, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 16, true);
	g.set_edge(3, 18, true);
	g.set_edge(3, 19, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 19, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 17, true);
	g.set_edge(5, 18, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 14, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 20, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 17, true);
	g.set_edge(8, 20, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 20, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 19, true);
	g.set_edge(10, 20, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 19, true);
	g.set_edge(11, 20, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 19, true);
	g.set_edge(12, 20, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 17, true);
	g.set_edge(13, 18, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 20, true);
	g.set_edge(15, 17, true);
	g.set_edge(15, 19, true);
	g.set_edge(16, 17, true);
	g.set_edge(16, 18, true);
	g.set_edge(17, 18, true);
	g.set_edge(17, 19, true);
	g.set_edge(18, 19, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_35_is_asymmetric() {
	let mut g = Graph::empty(22);

	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 18, true);
	g.set_edge(0, 19, true);
	g.set_edge(0, 21, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 18, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 18, true);
	g.set_edge(2, 19, true);
	g.set_edge(2, 21, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 16, true);
	g.set_edge(3, 18, true);
	g.set_edge(3, 19, true);
	g.set_edge(3, 21, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 21, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 17, true);
	g.set_edge(5, 18, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 17, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 18, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 18, true);
	g.set_edge(8, 19, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 17, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 17, true);
	g.set_edge(10, 21, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 18, true);
	g.set_edge(11, 19, true);
	g.set_edge(11, 20, true);
	g.set_edge(11, 21, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 19, true);
	g.set_edge(13, 18, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 19, true);
	g.set_edge(14, 20, true);
	g.set_edge(14, 21, true);
	g.set_edge(15, 19, true);
	g.set_edge(16, 17, true);
	g.set_edge(17, 21, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_36_is_asymmetric() {
	let mut g = Graph::empty(15);

	g.set_edge(0, 8, true);
	g.set_edge(0, 12, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 8, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 10, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 12, true);
	g.set_edge(4, 8, true);
	g.set_edge(5, 6, true);
	g.set_edge(6, 9, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 13, true);
	g.set_edge(9, 11, true);
	g.set_edge(10, 11, true);
	g.set_edge(12, 14, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_37_is_asymmetric() {
	let mut g = Graph::empty(24);

	g.set_edge(0, 5, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 20, true);
	g.set_edge(0, 23, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 18, true);
	g.set_edge(1, 20, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 22, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 21, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 20, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 23, true);
	g.set_edge(7, 18, true);
	g.set_edge(7, 20, true);
	g.set_edge(7, 22, true);
	g.set_edge(8, 19, true);
	g.set_edge(8, 22, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 19, true);
	g.set_edge(9, 23, true);
	g.set_edge(10, 11, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 18, true);
	g.set_edge(11, 20, true);
	g.set_edge(13, 22, true);
	g.set_edge(13, 23, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 19, true);
	g.set_edge(16, 19, true);
	g.set_edge(16, 20, true);
	g.set_edge(17, 20, true);
	g.set_edge(19, 21, true);
	g.set_edge(20, 22, true);
	g.set_edge(20, 23, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_38_is_asymmetric() {
	let mut g = Graph::empty(25);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 17, true);
	g.set_edge(0, 19, true);
	g.set_edge(0, 20, true);
	g.set_edge(0, 21, true);
	g.set_edge(0, 23, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 18, true);
	g.set_edge(1, 20, true);
	g.set_edge(1, 21, true);
	g.set_edge(1, 23, true);
	g.set_edge(1, 24, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 16, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 21, true);
	g.set_edge(2, 22, true);
	g.set_edge(2, 24, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 18, true);
	g.set_edge(3, 22, true);
	g.set_edge(3, 23, true);
	g.set_edge(3, 24, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 17, true);
	g.set_edge(4, 19, true);
	g.set_edge(4, 21, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 18, true);
	g.set_edge(5, 21, true);
	g.set_edge(5, 22, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 18, true);
	g.set_edge(6, 19, true);
	g.set_edge(6, 20, true);
	g.set_edge(6, 21, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 17, true);
	g.set_edge(7, 18, true);
	g.set_edge(7, 19, true);
	g.set_edge(7, 20, true);
	g.set_edge(7, 21, true);
	g.set_edge(7, 24, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 18, true);
	g.set_edge(8, 20, true);
	g.set_edge(8, 22, true);
	g.set_edge(8, 23, true);
	g.set_edge(8, 24, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 19, true);
	g.set_edge(9, 21, true);
	g.set_edge(9, 22, true);
	g.set_edge(9, 23, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 17, true);
	g.set_edge(10, 19, true);
	g.set_edge(10, 20, true);
	g.set_edge(10, 21, true);
	g.set_edge(10, 22, true);
	g.set_edge(10, 24, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 18, true);
	g.set_edge(11, 22, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 19, true);
	g.set_edge(12, 24, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 16, true);
	g.set_edge(13, 20, true);
	g.set_edge(13, 21, true);
	g.set_edge(13, 22, true);
	g.set_edge(13, 24, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 18, true);
	g.set_edge(14, 19, true);
	g.set_edge(14, 21, true);
	g.set_edge(14, 22, true);
	g.set_edge(15, 20, true);
	g.set_edge(15, 21, true);
	g.set_edge(15, 24, true);
	g.set_edge(16, 17, true);
	g.set_edge(16, 20, true);
	g.set_edge(16, 22, true);
	g.set_edge(16, 23, true);
	g.set_edge(16, 24, true);
	g.set_edge(17, 18, true);
	g.set_edge(17, 21, true);
	g.set_edge(17, 23, true);
	g.set_edge(18, 19, true);
	g.set_edge(18, 20, true);
	g.set_edge(18, 22, true);
	g.set_edge(18, 23, true);
	g.set_edge(18, 24, true);
	g.set_edge(19, 20, true);
	g.set_edge(19, 21, true);
	g.set_edge(20, 22, true);
	g.set_edge(20, 24, true);
	g.set_edge(21, 23, true);
	g.set_edge(21, 24, true);
	g.set_edge(22, 23, true);
	g.set_edge(22, 24, true);
	g.set_edge(23, 24, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_39_is_asymmetric() {
	let mut g = Graph::empty(11);

	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 9, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(2, 7, true);
	g.set_edge(3, 10, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 10, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(7, 9, true);
	g.set_edge(8, 9, true);
	g.set_edge(9, 10, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_40_is_asymmetric() {
	let mut g = Graph::empty(19);

	g.set_edge(0, 2, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 17, true);
	g.set_edge(0, 18, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 16, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 16, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 18, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 17, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 18, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 17, true);
	g.set_edge(6, 18, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 18, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 17, true);
	g.set_edge(8, 18, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 18, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 17, true);
	g.set_edge(10, 18, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 18, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 17, true);
	g.set_edge(12, 18, true);
	g.set_edge(13, 15, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 18, true);
	g.set_edge(15, 17, true);
	g.set_edge(15, 18, true);
	g.set_edge(16, 17, true);
	g.set_edge(16, 18, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_41_is_asymmetric() {
	let mut g = Graph::empty(17);

	g.set_edge(0, 2, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 16, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 13, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 13, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 16, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 16, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 15, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 14, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 13, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 14, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 15, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 15, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 16, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_42_is_asymmetric() {
	let mut g = Graph::empty(25);

	g.set_edge(0, 1, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 19, true);
	g.set_edge(0, 21, true);
	g.set_edge(0, 23, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 24, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 20, true);
	g.set_edge(2, 24, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 17, true);
	g.set_edge(3, 23, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 20, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 17, true);
	g.set_edge(5, 21, true);
	g.set_edge(5, 24, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 17, true);
	g.set_edge(6, 18, true);
	g.set_edge(6, 20, true);
	g.set_edge(6, 22, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 17, true);
	g.set_edge(7, 21, true);
	g.set_edge(7, 23, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 17, true);
	g.set_edge(8, 21, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 24, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 21, true);
	g.set_edge(10, 22, true);
	g.set_edge(10, 24, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 18, true);
	g.set_edge(11, 19, true);
	g.set_edge(11, 20, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 19, true);
	g.set_edge(13, 18, true);
	g.set_edge(13, 19, true);
	g.set_edge(13, 22, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 18, true);
	g.set_edge(14, 20, true);
	g.set_edge(14, 23, true);
	g.set_edge(15, 16, true);
	g.set_edge(17, 22, true);
	g.set_edge(17, 23, true);
	g.set_edge(18, 23, true);
	g.set_edge(19, 20, true);
	g.set_edge(20, 22, true);
	g.set_edge(21, 22, true);
	g.set_edge(21, 23, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_44_is_asymmetric() {
	let mut g = Graph::empty(18);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 16, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 17, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 16, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 16, true);
	g.set_edge(3, 17, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 17, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 15, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 17, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 15, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 16, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 17, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 17, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 17, true);
	g.set_edge(13, 17, true);
	g.set_edge(14, 15, true);
	g.set_edge(15, 17, true);
	g.set_edge(16, 17, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_45_is_asymmetric() {
	let mut g = Graph::empty(13);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 12, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 9, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 10, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 9, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 12, true);
	g.set_edge(7, 8, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(11, 12, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_47_is_asymmetric() {
	let mut g = Graph::empty(16);

	g.set_edge(0, 1, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 14, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 12, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 13, true);
	g.set_edge(4, 10, true);
	g.set_edge(6, 12, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 11, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 14, true);
	g.set_edge(10, 13, true);
	g.set_edge(11, 15, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_48_is_asymmetric() {
	let mut g = Graph::empty(22);

	g.set_edge(0, 3, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 18, true);
	g.set_edge(0, 19, true);
	g.set_edge(0, 21, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 20, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 18, true);
	g.set_edge(2, 21, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 20, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 17, true);
	g.set_edge(4, 18, true);
	g.set_edge(4, 21, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 18, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 18, true);
	g.set_edge(6, 19, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 20, true);
	g.set_edge(8, 20, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 18, true);
	g.set_edge(9, 20, true);
	g.set_edge(9, 21, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 20, true);
	g.set_edge(10, 21, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 19, true);
	g.set_edge(13, 17, true);
	g.set_edge(13, 18, true);
	g.set_edge(13, 19, true);
	g.set_edge(13, 20, true);
	g.set_edge(13, 21, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 18, true);
	g.set_edge(15, 17, true);
	g.set_edge(15, 21, true);
	g.set_edge(16, 17, true);
	g.set_edge(18, 20, true);
	g.set_edge(19, 20, true);
	g.set_edge(20, 21, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_49_is_asymmetric() {
	let mut g = Graph::empty(7);

	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 4, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(5, 6, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_50_is_asymmetric() {
	let mut g = Graph::empty(20);

	g.set_edge(0, 2, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 18, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 16, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 19, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 17, true);
	g.set_edge(3, 19, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 17, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 18, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 18, true);
	g.set_edge(6, 19, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 17, true);
	g.set_edge(7, 18, true);
	g.set_edge(7, 19, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 16, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 18, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 19, true);
	g.set_edge(11, 13, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 15, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 16, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 18, true);
	g.set_edge(15, 17, true);
	g.set_edge(15, 18, true);
	g.set_edge(16, 17, true);
	g.set_edge(17, 18, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_51_is_asymmetric() {
	let mut g = Graph::empty(12);

	g.set_edge(0, 1, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 9, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 10, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 11, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(9, 11, true);
	g.set_edge(10, 11, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_52_is_asymmetric() {
	let mut g = Graph::empty(13);

	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 12, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 6, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 12, true);
	g.set_edge(3, 7, true);
	g.set_edge(4, 10, true);
	g.set_edge(5, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 12, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 12, true);
	g.set_edge(8, 11, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_53_is_asymmetric() {
	let mut g = Graph::empty(24);

	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 18, true);
	g.set_edge(0, 21, true);
	g.set_edge(0, 23, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 18, true);
	g.set_edge(1, 19, true);
	g.set_edge(1, 20, true);
	g.set_edge(1, 21, true);
	g.set_edge(1, 22, true);
	g.set_edge(1, 23, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 16, true);
	g.set_edge(2, 18, true);
	g.set_edge(2, 21, true);
	g.set_edge(2, 23, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 16, true);
	g.set_edge(3, 17, true);
	g.set_edge(3, 20, true);
	g.set_edge(3, 21, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 17, true);
	g.set_edge(4, 18, true);
	g.set_edge(4, 21, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 17, true);
	g.set_edge(5, 18, true);
	g.set_edge(5, 20, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 17, true);
	g.set_edge(6, 19, true);
	g.set_edge(6, 21, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 18, true);
	g.set_edge(7, 19, true);
	g.set_edge(7, 20, true);
	g.set_edge(7, 21, true);
	g.set_edge(7, 22, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 18, true);
	g.set_edge(8, 22, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 20, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 18, true);
	g.set_edge(10, 19, true);
	g.set_edge(10, 20, true);
	g.set_edge(10, 21, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 18, true);
	g.set_edge(11, 19, true);
	g.set_edge(11, 20, true);
	g.set_edge(11, 21, true);
	g.set_edge(11, 22, true);
	g.set_edge(11, 23, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 17, true);
	g.set_edge(12, 19, true);
	g.set_edge(12, 20, true);
	g.set_edge(12, 21, true);
	g.set_edge(12, 22, true);
	g.set_edge(12, 23, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 17, true);
	g.set_edge(13, 20, true);
	g.set_edge(13, 21, true);
	g.set_edge(13, 22, true);
	g.set_edge(13, 23, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 19, true);
	g.set_edge(14, 20, true);
	g.set_edge(14, 21, true);
	g.set_edge(14, 23, true);
	g.set_edge(15, 19, true);
	g.set_edge(15, 21, true);
	g.set_edge(15, 22, true);
	g.set_edge(15, 23, true);
	g.set_edge(16, 20, true);
	g.set_edge(16, 21, true);
	g.set_edge(16, 22, true);
	g.set_edge(17, 19, true);
	g.set_edge(17, 20, true);
	g.set_edge(18, 19, true);
	g.set_edge(19, 20, true);
	g.set_edge(19, 23, true);
	g.set_edge(20, 21, true);
	g.set_edge(20, 23, true);
	g.set_edge(21, 22, true);
	g.set_edge(22, 23, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_54_is_asymmetric() {
	let mut g = Graph::empty(9);

	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 8, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(5, 7, true);
	g.set_edge(6, 7, true);
	g.set_edge(7, 8, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_55_is_asymmetric() {
	let mut g = Graph::empty(7);

	g.set_edge(0, 2, true);
	g.set_edge(1, 5, true);
	g.set_edge(2, 5, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 6, true);
	g.set_edge(5, 6, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_58_is_asymmetric() {
	let mut g = Graph::empty(23);

	g.set_edge(0, 6, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 15, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 18, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 18, true);
	g.set_edge(2, 19, true);
	g.set_edge(2, 20, true);
	g.set_edge(2, 21, true);
	g.set_edge(2, 22, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 18, true);
	g.set_edge(3, 21, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 15, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 9, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 18, true);
	g.set_edge(6, 19, true);
	g.set_edge(6, 20, true);
	g.set_edge(6, 21, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 19, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 18, true);
	g.set_edge(8, 21, true);
	g.set_edge(8, 22, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 15, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 18, true);
	g.set_edge(10, 19, true);
	g.set_edge(10, 22, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 21, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 19, true);
	g.set_edge(12, 21, true);
	g.set_edge(13, 14, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 19, true);
	g.set_edge(15, 22, true);
	g.set_edge(16, 21, true);
	g.set_edge(17, 21, true);
	g.set_edge(17, 22, true);
	g.set_edge(18, 21, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_59_is_asymmetric() {
	let mut g = Graph::empty(12);

	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 11, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(4, 8, true);
	g.set_edge(5, 10, true);
	g.set_edge(6, 7, true);
	g.set_edge(7, 10, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_60_is_asymmetric() {
	let mut g = Graph::empty(14);

	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 13, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 13, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 13, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 13, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 12, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(7, 12, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 13, true);
	g.set_edge(10, 12, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 13, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_61_is_asymmetric() {
	let mut g = Graph::empty(20);

	g.set_edge(0, 3, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 15, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 15, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 16, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 9, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 19, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 16, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 17, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 13, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 18, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 12, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 19, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 19, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 17, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 19, true);
	g.set_edge(14, 18, true);
	g.set_edge(14, 19, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_62_is_asymmetric() {
	let mut g = Graph::empty(23);

	g.set_edge(0, 1, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 18, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 20, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 16, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 20, true);
	g.set_edge(3, 21, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 20, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 17, true);
	g.set_edge(5, 18, true);
	g.set_edge(5, 19, true);
	g.set_edge(5, 21, true);
	g.set_edge(5, 22, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 18, true);
	g.set_edge(6, 22, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 18, true);
	g.set_edge(7, 20, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 20, true);
	g.set_edge(8, 21, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 19, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 21, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 21, true);
	g.set_edge(12, 17, true);
	g.set_edge(12, 19, true);
	g.set_edge(12, 22, true);
	g.set_edge(13, 15, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 20, true);
	g.set_edge(15, 16, true);
	g.set_edge(15, 18, true);
	g.set_edge(18, 20, true);
	g.set_edge(19, 22, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_63_is_asymmetric() {
	let mut g = Graph::empty(19);

	g.set_edge(0, 3, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 15, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 18, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 15, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 17, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 16, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 18, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 16, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 17, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 17, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 18, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 17, true);
	g.set_edge(10, 18, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 18, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 17, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 17, true);
	g.set_edge(13, 18, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 18, true);
	g.set_edge(15, 16, true);
	g.set_edge(15, 18, true);
	g.set_edge(16, 17, true);
	g.set_edge(16, 18, true);
	g.set_edge(17, 18, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_64_is_asymmetric() {
	let mut g = Graph::empty(20);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 17, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 18, true);
	g.set_edge(1, 19, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 13, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 18, true);
	g.set_edge(3, 19, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 17, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 16, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 17, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 18, true);
	g.set_edge(7, 19, true);
	g.set_edge(8, 17, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 16, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 17, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 15, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 19, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_65_is_asymmetric() {
	let mut g = Graph::empty(18);

	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 17, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 17, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 17, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 17, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 15, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 17, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 11, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 17, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 17, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 16, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 15, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 17, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 17, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 16, true);
	g.set_edge(13, 17, true);
	g.set_edge(14, 16, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_68_is_asymmetric() {
	let mut g = Graph::empty(19);

	g.set_edge(0, 2, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 17, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 18, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 16, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 17, true);
	g.set_edge(3, 18, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 18, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 18, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 18, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 18, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 17, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 18, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 15, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 18, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 17, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 17, true);
	g.set_edge(13, 18, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 18, true);
	g.set_edge(15, 17, true);
	g.set_edge(15, 18, true);
	g.set_edge(16, 17, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_70_is_asymmetric() {
	let mut g = Graph::empty(8);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 7, true);
	g.set_edge(5, 6, true);
	g.set_edge(6, 7, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_71_is_asymmetric() {
	let mut g = Graph::empty(15);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 14, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 10, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 13, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 14, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 13, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 13, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 10, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 14, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 13, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 13, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 14, true);
	g.set_edge(13, 14, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_72_is_asymmetric() {
	let mut g = Graph::empty(7);

	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(4, 5, true);
	g.set_edge(5, 6, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_73_is_asymmetric() {
	let mut g = Graph::empty(13);

	g.set_edge(0, 1, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 12, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 12, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 11, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 11, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 11, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(7, 8, true);
	g.set_edge(8, 12, true);
	g.set_edge(9, 12, true);
	g.set_edge(10, 12, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_74_is_asymmetric() {
	let mut g = Graph::empty(24);

	g.set_edge(0, 1, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 19, true);
	g.set_edge(0, 20, true);
	g.set_edge(0, 21, true);
	g.set_edge(0, 22, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 18, true);
	g.set_edge(1, 20, true);
	g.set_edge(1, 21, true);
	g.set_edge(1, 22, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 21, true);
	g.set_edge(2, 23, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 19, true);
	g.set_edge(3, 21, true);
	g.set_edge(3, 22, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 18, true);
	g.set_edge(4, 19, true);
	g.set_edge(4, 21, true);
	g.set_edge(4, 22, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 19, true);
	g.set_edge(5, 20, true);
	g.set_edge(5, 21, true);
	g.set_edge(5, 22, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 17, true);
	g.set_edge(6, 18, true);
	g.set_edge(6, 19, true);
	g.set_edge(6, 22, true);
	g.set_edge(6, 23, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 19, true);
	g.set_edge(7, 20, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 17, true);
	g.set_edge(8, 19, true);
	g.set_edge(8, 21, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 18, true);
	g.set_edge(9, 19, true);
	g.set_edge(9, 20, true);
	g.set_edge(9, 22, true);
	g.set_edge(9, 23, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 20, true);
	g.set_edge(10, 22, true);
	g.set_edge(10, 23, true);
	g.set_edge(11, 17, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 17, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 19, true);
	g.set_edge(12, 20, true);
	g.set_edge(12, 21, true);
	g.set_edge(12, 22, true);
	g.set_edge(12, 23, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 17, true);
	g.set_edge(13, 22, true);
	g.set_edge(13, 23, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 23, true);
	g.set_edge(15, 17, true);
	g.set_edge(15, 19, true);
	g.set_edge(15, 20, true);
	g.set_edge(15, 22, true);
	g.set_edge(16, 20, true);
	g.set_edge(16, 22, true);
	g.set_edge(16, 23, true);
	g.set_edge(17, 19, true);
	g.set_edge(17, 22, true);
	g.set_edge(18, 22, true);
	g.set_edge(20, 23, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_75_is_asymmetric() {
	let mut g = Graph::empty(19);

	g.set_edge(0, 3, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 18, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 18, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 16, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 18, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 16, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 17, true);
	g.set_edge(4, 18, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 17, true);
	g.set_edge(5, 18, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 15, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 14, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 18, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 17, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 17, true);
	g.set_edge(10, 18, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 17, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 18, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(15, 16, true);
	g.set_edge(15, 18, true);
	g.set_edge(16, 17, true);
	g.set_edge(16, 18, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_76_is_asymmetric() {
	let mut g = Graph::empty(16);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 14, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 15, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 15, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 13, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 14, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 15, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 15, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 15, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 13, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 14, true);
	g.set_edge(12, 14, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_77_is_asymmetric() {
	let mut g = Graph::empty(13);

	g.set_edge(0, 4, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 12, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 12, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 12, true);
	g.set_edge(5, 11, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 11, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 12, true);
	g.set_edge(9, 12, true);
	g.set_edge(11, 12, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_78_is_asymmetric() {
	let mut g = Graph::empty(11);

	g.set_edge(0, 3, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 8, true);
	g.set_edge(1, 3, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 10, true);
	g.set_edge(3, 10, true);
	g.set_edge(4, 10, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 10, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 10, true);
	g.set_edge(8, 9, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_79_is_asymmetric() {
	let mut g = Graph::empty(9);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 8, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(6, 7, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_80_is_asymmetric() {
	let mut g = Graph::empty(13);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 12, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 10, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 12, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 11, true);
	g.set_edge(10, 12, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_81_is_asymmetric() {
	let mut g = Graph::empty(21);

	g.set_edge(0, 1, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 17, true);
	g.set_edge(0, 18, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 18, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 16, true);
	g.set_edge(2, 20, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 20, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 18, true);
	g.set_edge(4, 19, true);
	g.set_edge(4, 20, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 19, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 13, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 17, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 18, true);
	g.set_edge(8, 19, true);
	g.set_edge(8, 20, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 18, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 17, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 19, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 17, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 20, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 19, true);
	g.set_edge(13, 20, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 18, true);
	g.set_edge(14, 19, true);
	g.set_edge(14, 20, true);
	g.set_edge(15, 16, true);
	g.set_edge(15, 20, true);
	g.set_edge(16, 20, true);
	g.set_edge(17, 18, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_82_is_asymmetric() {
	let mut g = Graph::empty(9);

	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 6, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 8, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 8, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(6, 8, true);
	g.set_edge(7, 8, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_83_is_asymmetric() {
	let mut g = Graph::empty(20);

	g.set_edge(0, 2, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 17, true);
	g.set_edge(0, 19, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 18, true);
	g.set_edge(1, 19, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 18, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 16, true);
	g.set_edge(3, 19, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 18, true);
	g.set_edge(4, 19, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 17, true);
	g.set_edge(5, 18, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 19, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 17, true);
	g.set_edge(7, 18, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 16, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 17, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 18, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 18, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 18, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 16, true);
	g.set_edge(13, 17, true);
	g.set_edge(13, 19, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 18, true);
	g.set_edge(14, 19, true);
	g.set_edge(15, 16, true);
	g.set_edge(16, 17, true);
	g.set_edge(16, 18, true);
	g.set_edge(17, 18, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_85_is_asymmetric() {
	let mut g = Graph::empty(11);

	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 8, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 9, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 10, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 10, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 9, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 9, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(9, 10, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_87_is_asymmetric() {
	let mut g = Graph::empty(9);

	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 8, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(2, 6, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 8, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_88_is_asymmetric() {
	let mut g = Graph::empty(17);

	g.set_edge(0, 4, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 16, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 16, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 15, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 14, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 16, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 14, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 14, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 13, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 13, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 16, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 14, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 16, true);
	g.set_edge(13, 15, true);
	g.set_edge(14, 16, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_90_is_asymmetric() {
	let mut g = Graph::empty(11);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 6, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 10, true);
	g.set_edge(2, 8, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 10, true);
	g.set_edge(7, 9, true);
	g.set_edge(8, 10, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_92_is_asymmetric() {
	let mut g = Graph::empty(18);

	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 16, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 17, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 17, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 16, true);
	g.set_edge(3, 17, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 17, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 17, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 17, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 16, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 17, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 17, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 17, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 17, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 17, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(15, 17, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_93_is_asymmetric() {
	let mut g = Graph::empty(20);

	g.set_edge(0, 1, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 18, true);
	g.set_edge(0, 19, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 17, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 16, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 19, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 18, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 17, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 17, true);
	g.set_edge(5, 18, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 17, true);
	g.set_edge(6, 18, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 19, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 18, true);
	g.set_edge(8, 19, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 18, true);
	g.set_edge(9, 19, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 18, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 19, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 16, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 19, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 16, true);
	g.set_edge(14, 15, true);
	g.set_edge(15, 18, true);
	g.set_edge(15, 19, true);
	g.set_edge(16, 18, true);
	g.set_edge(17, 18, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_94_is_asymmetric() {
	let mut g = Graph::empty(22);

	g.set_edge(0, 6, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 17, true);
	g.set_edge(0, 21, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 16, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 11, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 20, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 17, true);
	g.set_edge(4, 18, true);
	g.set_edge(4, 19, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 19, true);
	g.set_edge(5, 21, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 20, true);
	g.set_edge(6, 21, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 21, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 19, true);
	g.set_edge(8, 21, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 19, true);
	g.set_edge(9, 21, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 19, true);
	g.set_edge(10, 20, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 20, true);
	g.set_edge(13, 18, true);
	g.set_edge(13, 20, true);
	g.set_edge(13, 21, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 20, true);
	g.set_edge(15, 18, true);
	g.set_edge(15, 21, true);
	g.set_edge(16, 17, true);
	g.set_edge(16, 21, true);
	g.set_edge(17, 20, true);
	g.set_edge(19, 20, true);
	g.set_edge(19, 21, true);
	g.set_edge(20, 21, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_95_is_asymmetric() {
	let mut g = Graph::empty(22);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 18, true);
	g.set_edge(0, 19, true);
	g.set_edge(0, 20, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 18, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 19, true);
	g.set_edge(2, 21, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 16, true);
	g.set_edge(3, 19, true);
	g.set_edge(3, 20, true);
	g.set_edge(3, 21, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 17, true);
	g.set_edge(4, 18, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 17, true);
	g.set_edge(5, 18, true);
	g.set_edge(5, 19, true);
	g.set_edge(5, 21, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 18, true);
	g.set_edge(6, 19, true);
	g.set_edge(6, 20, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 17, true);
	g.set_edge(7, 19, true);
	g.set_edge(7, 21, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 20, true);
	g.set_edge(8, 21, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 20, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 18, true);
	g.set_edge(10, 19, true);
	g.set_edge(10, 20, true);
	g.set_edge(10, 21, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 20, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 19, true);
	g.set_edge(12, 20, true);
	g.set_edge(12, 21, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 17, true);
	g.set_edge(13, 19, true);
	g.set_edge(13, 21, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 19, true);
	g.set_edge(14, 20, true);
	g.set_edge(15, 17, true);
	g.set_edge(15, 19, true);
	g.set_edge(15, 21, true);
	g.set_edge(16, 18, true);
	g.set_edge(16, 20, true);
	g.set_edge(19, 20, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_96_is_asymmetric() {
	let mut g = Graph::empty(16);

	g.set_edge(0, 2, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 13, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 15, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 15, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 14, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 14, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 13, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 15, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 15, true);
	g.set_edge(9, 13, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 13, true);
	g.set_edge(11, 13, true);
	g.set_edge(12, 14, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_97_is_asymmetric() {
	let mut g = Graph::empty(11);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 9, true);
	g.set_edge(7, 8, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_98_is_asymmetric() {
	let mut g = Graph::empty(16);

	g.set_edge(0, 1, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 14, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 13, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 14, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 15, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 15, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 15, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 15, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 14, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 15, true);
	g.set_edge(9, 11, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 15, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 14, true);
	g.set_edge(12, 15, true);
	g.set_edge(13, 15, true);
	g.set_edge(14, 15, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_99_is_asymmetric() {
	let mut g = Graph::empty(17);

	g.set_edge(0, 1, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 15, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 16, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 16, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 16, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 16, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 15, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 16, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(9, 14, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 15, true);
	g.set_edge(11, 12, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 16, true);
	g.set_edge(13, 15, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_100_is_asymmetric() {
	let mut g = Graph::empty(9);

	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 6, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(4, 8, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 8, true);
	g.set_edge(6, 7, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_101_is_asymmetric() {
	let mut g = Graph::empty(23);

	g.set_edge(0, 1, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 20, true);
	g.set_edge(0, 21, true);
	g.set_edge(0, 22, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 18, true);
	g.set_edge(1, 21, true);
	g.set_edge(1, 22, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 16, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 19, true);
	g.set_edge(2, 22, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 16, true);
	g.set_edge(3, 17, true);
	g.set_edge(3, 19, true);
	g.set_edge(3, 20, true);
	g.set_edge(3, 21, true);
	g.set_edge(3, 22, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 19, true);
	g.set_edge(4, 20, true);
	g.set_edge(4, 22, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 18, true);
	g.set_edge(5, 19, true);
	g.set_edge(5, 20, true);
	g.set_edge(5, 21, true);
	g.set_edge(5, 22, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 17, true);
	g.set_edge(6, 20, true);
	g.set_edge(6, 21, true);
	g.set_edge(6, 22, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 17, true);
	g.set_edge(7, 19, true);
	g.set_edge(7, 22, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 18, true);
	g.set_edge(8, 19, true);
	g.set_edge(8, 21, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 19, true);
	g.set_edge(9, 21, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 17, true);
	g.set_edge(10, 18, true);
	g.set_edge(10, 21, true);
	g.set_edge(10, 22, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 14, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 18, true);
	g.set_edge(11, 20, true);
	g.set_edge(11, 21, true);
	g.set_edge(11, 22, true);
	g.set_edge(12, 19, true);
	g.set_edge(12, 20, true);
	g.set_edge(12, 21, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 19, true);
	g.set_edge(14, 20, true);
	g.set_edge(14, 21, true);
	g.set_edge(15, 16, true);
	g.set_edge(15, 20, true);
	g.set_edge(15, 22, true);
	g.set_edge(16, 17, true);
	g.set_edge(16, 18, true);
	g.set_edge(16, 21, true);
	g.set_edge(16, 22, true);
	g.set_edge(17, 18, true);
	g.set_edge(17, 20, true);
	g.set_edge(17, 22, true);
	g.set_edge(18, 20, true);
	g.set_edge(18, 21, true);
	g.set_edge(18, 22, true);
	g.set_edge(19, 20, true);
	g.set_edge(19, 21, true);
	g.set_edge(20, 21, true);
	g.set_edge(20, 22, true);
	g.set_edge(21, 22, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_102_is_asymmetric() {
	let mut g = Graph::empty(9);

	g.set_edge(0, 1, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 8, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 8, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 8, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(7, 8, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_103_is_asymmetric() {
	let mut g = Graph::empty(19);

	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 17, true);
	g.set_edge(0, 18, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 16, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 18, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 17, true);
	g.set_edge(3, 18, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 15, true);
	g.set_edge(4, 17, true);
	g.set_edge(4, 18, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 14, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 18, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 17, true);
	g.set_edge(7, 18, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 18, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 17, true);
	g.set_edge(10, 13, true);
	g.set_edge(11, 16, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 15, true);
	g.set_edge(13, 18, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 18, true);
	g.set_edge(15, 16, true);
	g.set_edge(17, 18, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_105_is_asymmetric() {
	let mut g = Graph::empty(23);

	g.set_edge(0, 9, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 17, true);
	g.set_edge(0, 20, true);
	g.set_edge(0, 21, true);
	g.set_edge(0, 22, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 19, true);
	g.set_edge(1, 21, true);
	g.set_edge(1, 22, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 20, true);
	g.set_edge(2, 21, true);
	g.set_edge(2, 22, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 16, true);
	g.set_edge(3, 17, true);
	g.set_edge(3, 18, true);
	g.set_edge(3, 19, true);
	g.set_edge(3, 21, true);
	g.set_edge(3, 22, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 18, true);
	g.set_edge(4, 22, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 18, true);
	g.set_edge(5, 19, true);
	g.set_edge(5, 22, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 18, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 21, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 19, true);
	g.set_edge(8, 22, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 19, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 19, true);
	g.set_edge(10, 20, true);
	g.set_edge(10, 21, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 18, true);
	g.set_edge(11, 19, true);
	g.set_edge(11, 20, true);
	g.set_edge(11, 21, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 19, true);
	g.set_edge(12, 20, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 18, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 18, true);
	g.set_edge(14, 20, true);
	g.set_edge(14, 21, true);
	g.set_edge(15, 20, true);
	g.set_edge(15, 21, true);
	g.set_edge(16, 17, true);
	g.set_edge(16, 18, true);
	g.set_edge(16, 19, true);
	g.set_edge(17, 18, true);
	g.set_edge(18, 20, true);
	g.set_edge(18, 21, true);
	g.set_edge(19, 22, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_108_is_asymmetric() {
	let mut g = Graph::empty(9);

	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 8, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 7, true);
	g.set_edge(4, 6, true);
	g.set_edge(7, 8, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_109_is_asymmetric() {
	let mut g = Graph::empty(13);

	g.set_edge(0, 2, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 10, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 11, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 11, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 11, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 12, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 12, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 12, true);
	g.set_edge(10, 12, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_110_is_asymmetric() {
	let mut g = Graph::empty(17);

	g.set_edge(0, 1, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 13, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 15, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 16, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 16, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 16, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 16, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 16, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 16, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 13, true);
	g.set_edge(7, 14, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 16, true);
	g.set_edge(9, 11, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 16, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 16, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 14, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(15, 16, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_111_is_asymmetric() {
	let mut g = Graph::empty(11);

	g.set_edge(0, 2, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 9, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 9, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 10, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 10, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 10, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_112_is_asymmetric() {
	let mut g = Graph::empty(20);

	g.set_edge(0, 2, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 15, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 18, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 13, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 19, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 10, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 18, true);
	g.set_edge(2, 19, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 6, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 16, true);
	g.set_edge(3, 17, true);
	g.set_edge(3, 18, true);
	g.set_edge(3, 19, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 17, true);
	g.set_edge(4, 19, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 18, true);
	g.set_edge(5, 19, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 13, true);
	g.set_edge(6, 14, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 18, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 16, true);
	g.set_edge(7, 17, true);
	g.set_edge(7, 18, true);
	g.set_edge(7, 19, true);
	g.set_edge(8, 11, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 17, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 17, true);
	g.set_edge(9, 18, true);
	g.set_edge(9, 19, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 17, true);
	g.set_edge(10, 19, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 19, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 15, true);
	g.set_edge(12, 17, true);
	g.set_edge(12, 19, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 19, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 18, true);
	g.set_edge(14, 19, true);
	g.set_edge(15, 17, true);
	g.set_edge(15, 18, true);
	g.set_edge(16, 18, true);
	g.set_edge(16, 19, true);
	g.set_edge(18, 19, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_114_is_asymmetric() {
	let mut g = Graph::empty(12);

	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 9, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 3, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 11, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 9, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 11, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 11, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 11, true);
	g.set_edge(9, 10, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_115_is_asymmetric() {
	let mut g = Graph::empty(14);

	g.set_edge(0, 4, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 11, true);
	g.set_edge(1, 8, true);
	g.set_edge(1, 12, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 13, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 12, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 13, true);
	g.set_edge(7, 10, true);
	g.set_edge(8, 13, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 13, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 12, true);
	g.set_edge(11, 13, true);
	g.set_edge(12, 13, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_116_is_asymmetric() {
	let mut g = Graph::empty(24);

	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 5, true);
	g.set_edge(0, 8, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 17, true);
	g.set_edge(0, 18, true);
	g.set_edge(0, 20, true);
	g.set_edge(0, 22, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 12, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 16, true);
	g.set_edge(1, 17, true);
	g.set_edge(1, 19, true);
	g.set_edge(1, 20, true);
	g.set_edge(1, 23, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 18, true);
	g.set_edge(2, 20, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 15, true);
	g.set_edge(3, 16, true);
	g.set_edge(3, 20, true);
	g.set_edge(3, 22, true);
	g.set_edge(3, 23, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 10, true);
	g.set_edge(4, 15, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 14, true);
	g.set_edge(5, 17, true);
	g.set_edge(5, 18, true);
	g.set_edge(5, 19, true);
	g.set_edge(5, 21, true);
	g.set_edge(5, 23, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 19, true);
	g.set_edge(6, 20, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 15, true);
	g.set_edge(7, 20, true);
	g.set_edge(7, 21, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 13, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 16, true);
	g.set_edge(8, 17, true);
	g.set_edge(8, 18, true);
	g.set_edge(8, 19, true);
	g.set_edge(8, 21, true);
	g.set_edge(8, 22, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 18, true);
	g.set_edge(9, 19, true);
	g.set_edge(9, 23, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 15, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 20, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 22, true);
	g.set_edge(12, 14, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 20, true);
	g.set_edge(12, 21, true);
	g.set_edge(12, 22, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 17, true);
	g.set_edge(13, 18, true);
	g.set_edge(13, 20, true);
	g.set_edge(13, 23, true);
	g.set_edge(14, 15, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(14, 18, true);
	g.set_edge(15, 17, true);
	g.set_edge(15, 19, true);
	g.set_edge(15, 20, true);
	g.set_edge(15, 22, true);
	g.set_edge(16, 20, true);
	g.set_edge(16, 21, true);
	g.set_edge(16, 22, true);
	g.set_edge(16, 23, true);
	g.set_edge(17, 21, true);
	g.set_edge(18, 22, true);
	g.set_edge(18, 23, true);
	g.set_edge(19, 21, true);
	g.set_edge(19, 22, true);
	g.set_edge(20, 22, true);
	g.set_edge(20, 23, true);
	g.set_edge(21, 22, true);
	g.set_edge(21, 23, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_117_is_asymmetric() {
	let mut g = Graph::empty(12);

	g.set_edge(0, 2, true);
	g.set_edge(0, 10, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 11, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 5, true);
	g.set_edge(2, 6, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 10, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 9, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(8, 11, true);
	g.set_edge(9, 10, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_118_is_asymmetric() {
	let mut g = Graph::empty(25);

	g.set_edge(0, 4, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 20, true);
	g.set_edge(0, 21, true);
	g.set_edge(0, 24, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 18, true);
	g.set_edge(1, 19, true);
	g.set_edge(1, 20, true);
	g.set_edge(1, 23, true);
	g.set_edge(1, 24, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 8, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 19, true);
	g.set_edge(2, 24, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 8, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 10, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 17, true);
	g.set_edge(3, 20, true);
	g.set_edge(3, 23, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 16, true);
	g.set_edge(4, 17, true);
	g.set_edge(4, 18, true);
	g.set_edge(4, 19, true);
	g.set_edge(4, 22, true);
	g.set_edge(5, 10, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 18, true);
	g.set_edge(5, 19, true);
	g.set_edge(5, 20, true);
	g.set_edge(5, 24, true);
	g.set_edge(6, 8, true);
	g.set_edge(6, 9, true);
	g.set_edge(6, 12, true);
	g.set_edge(6, 16, true);
	g.set_edge(6, 21, true);
	g.set_edge(6, 24, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 18, true);
	g.set_edge(8, 17, true);
	g.set_edge(8, 20, true);
	g.set_edge(9, 11, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 14, true);
	g.set_edge(9, 18, true);
	g.set_edge(9, 24, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 13, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 18, true);
	g.set_edge(10, 20, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 22, true);
	g.set_edge(11, 23, true);
	g.set_edge(12, 18, true);
	g.set_edge(12, 19, true);
	g.set_edge(12, 22, true);
	g.set_edge(12, 23, true);
	g.set_edge(13, 14, true);
	g.set_edge(13, 15, true);
	g.set_edge(13, 17, true);
	g.set_edge(13, 24, true);
	g.set_edge(14, 20, true);
	g.set_edge(14, 22, true);
	g.set_edge(14, 23, true);
	g.set_edge(14, 24, true);
	g.set_edge(15, 19, true);
	g.set_edge(16, 19, true);
	g.set_edge(16, 21, true);
	g.set_edge(16, 23, true);
	g.set_edge(17, 20, true);
	g.set_edge(17, 21, true);
	g.set_edge(17, 23, true);
	g.set_edge(18, 20, true);
	g.set_edge(18, 21, true);
	g.set_edge(18, 24, true);
	g.set_edge(20, 21, true);
	g.set_edge(20, 23, true);
	g.set_edge(20, 24, true);
	g.set_edge(21, 23, true);
	g.set_edge(21, 24, true);
	g.set_edge(22, 23, true);
	g.set_edge(23, 24, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_119_is_asymmetric() {
	let mut g = Graph::empty(14);

	g.set_edge(0, 1, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 11, true);
	g.set_edge(0, 12, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 13, true);
	g.set_edge(2, 3, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 12, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 8, true);
	g.set_edge(4, 11, true);
	g.set_edge(4, 12, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 13, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 11, true);
	g.set_edge(6, 12, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 11, true);
	g.set_edge(7, 12, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 13, true);
	g.set_edge(10, 13, true);
	g.set_edge(11, 12, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_120_is_asymmetric() {
	let mut g = Graph::empty(21);

	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(0, 4, true);
	g.set_edge(0, 9, true);
	g.set_edge(0, 10, true);
	g.set_edge(0, 12, true);
	g.set_edge(0, 14, true);
	g.set_edge(0, 16, true);
	g.set_edge(0, 20, true);
	g.set_edge(1, 5, true);
	g.set_edge(1, 11, true);
	g.set_edge(1, 20, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 12, true);
	g.set_edge(2, 14, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 7, true);
	g.set_edge(3, 11, true);
	g.set_edge(3, 13, true);
	g.set_edge(3, 18, true);
	g.set_edge(4, 6, true);
	g.set_edge(4, 9, true);
	g.set_edge(4, 13, true);
	g.set_edge(4, 14, true);
	g.set_edge(4, 19, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 11, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 15, true);
	g.set_edge(6, 10, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 18, true);
	g.set_edge(6, 20, true);
	g.set_edge(7, 8, true);
	g.set_edge(7, 10, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 17, true);
	g.set_edge(7, 19, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 12, true);
	g.set_edge(8, 14, true);
	g.set_edge(8, 15, true);
	g.set_edge(8, 20, true);
	g.set_edge(9, 10, true);
	g.set_edge(9, 12, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 19, true);
	g.set_edge(9, 20, true);
	g.set_edge(10, 11, true);
	g.set_edge(10, 14, true);
	g.set_edge(10, 16, true);
	g.set_edge(10, 17, true);
	g.set_edge(10, 18, true);
	g.set_edge(10, 20, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 13, true);
	g.set_edge(11, 17, true);
	g.set_edge(12, 13, true);
	g.set_edge(12, 17, true);
	g.set_edge(12, 19, true);
	g.set_edge(12, 20, true);
	g.set_edge(13, 19, true);
	g.set_edge(14, 20, true);
	g.set_edge(15, 16, true);
	g.set_edge(16, 17, true);
	g.set_edge(16, 20, true);
	g.set_edge(17, 19, true);
	g.set_edge(17, 20, true);
	g.set_edge(18, 19, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_122_is_asymmetric() {
	let mut g = Graph::empty(21);

	g.set_edge(0, 1, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 20, true);
	g.set_edge(1, 6, true);
	g.set_edge(1, 7, true);
	g.set_edge(1, 10, true);
	g.set_edge(1, 14, true);
	g.set_edge(1, 15, true);
	g.set_edge(1, 17, true);
	g.set_edge(2, 11, true);
	g.set_edge(2, 14, true);
	g.set_edge(2, 15, true);
	g.set_edge(2, 17, true);
	g.set_edge(2, 19, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 5, true);
	g.set_edge(3, 9, true);
	g.set_edge(3, 12, true);
	g.set_edge(3, 14, true);
	g.set_edge(3, 19, true);
	g.set_edge(4, 12, true);
	g.set_edge(4, 13, true);
	g.set_edge(5, 9, true);
	g.set_edge(5, 12, true);
	g.set_edge(5, 13, true);
	g.set_edge(5, 15, true);
	g.set_edge(5, 16, true);
	g.set_edge(5, 18, true);
	g.set_edge(5, 20, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 15, true);
	g.set_edge(6, 19, true);
	g.set_edge(7, 9, true);
	g.set_edge(7, 12, true);
	g.set_edge(7, 14, true);
	g.set_edge(7, 18, true);
	g.set_edge(8, 9, true);
	g.set_edge(8, 10, true);
	g.set_edge(9, 13, true);
	g.set_edge(9, 15, true);
	g.set_edge(9, 16, true);
	g.set_edge(9, 19, true);
	g.set_edge(9, 20, true);
	g.set_edge(10, 12, true);
	g.set_edge(10, 15, true);
	g.set_edge(11, 12, true);
	g.set_edge(11, 15, true);
	g.set_edge(11, 16, true);
	g.set_edge(11, 17, true);
	g.set_edge(11, 19, true);
	g.set_edge(12, 17, true);
	g.set_edge(12, 19, true);
	g.set_edge(14, 16, true);
	g.set_edge(14, 17, true);
	g.set_edge(15, 16, true);
	g.set_edge(16, 18, true);
	g.set_edge(16, 19, true);
	g.set_edge(17, 19, true);
	g.set_edge(18, 19, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_123_is_asymmetric() {
	let mut g = Graph::empty(6);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 3, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 5, true);
	g.set_edge(2, 4, true);
	g.set_edge(2, 5, true);
	g.set_edge(4, 5, true);

	assert_eq!(g.search_asymmetry(), true);
}
#[test]
fn igraph_rand_128_is_asymmetric() {
	let mut g = Graph::empty(12);

	g.set_edge(0, 1, true);
	g.set_edge(0, 2, true);
	g.set_edge(0, 6, true);
	g.set_edge(0, 7, true);
	g.set_edge(0, 9, true);
	g.set_edge(1, 2, true);
	g.set_edge(1, 4, true);
	g.set_edge(1, 9, true);
	g.set_edge(1, 10, true);
	g.set_edge(2, 7, true);
	g.set_edge(2, 9, true);
	g.set_edge(2, 11, true);
	g.set_edge(3, 4, true);
	g.set_edge(3, 6, true);
	g.set_edge(4, 5, true);
	g.set_edge(4, 7, true);
	g.set_edge(4, 8, true);
	g.set_edge(4, 10, true);
	g.set_edge(5, 6, true);
	g.set_edge(5, 7, true);
	g.set_edge(5, 8, true);
	g.set_edge(5, 10, true);
	g.set_edge(6, 7, true);
	g.set_edge(6, 8, true);
	g.set_edge(7, 8, true);
	g.set_edge(8, 9, true);
	g.set_edge(9, 11, true);
	g.set_edge(10, 11, true);

	assert_eq!(g.search_asymmetry(), true);
}
